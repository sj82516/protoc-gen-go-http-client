package main

import (
    "flag"
    
    "google.golang.org/protobuf/compiler/protogen"
)

func main() {
    var flags flag.FlagSet
    baseUrl := flags.String("base_url", "", "flags from command")
    opts := &protogen.Options{
        ParamFunc: flags.Set,
    }
    opts.Run(func(gen *protogen.Plugin) error {
        for _, f := range gen.Files {
            if !f.Generate {
                continue
            }
            generateFile(gen, f, baseUrl)
        }
        return nil
    })
}

// generateFile generates a _http.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, baseURL *string) {
    filename := file.GeneratedFilenamePrefix + "_http.pb.go"
    g := gen.NewGeneratedFile(filename, file.GoImportPath)
    g.P("// Code generated by protoc-gen-go-http. DO NOT EDIT.")
    g.P("// Your base url", *baseURL)
    g.P()
    g.P("package ", file.GoPackageName)
    g.P()
    g.P("func main() {")
    
    for _, srv := range file.Services {
        for _, method := range srv.Methods {
            if method.GoName == "Get" {
                g.P("// it's get")
            }
        }
    }
    
    g.P()
    g.P("}")
}
