package main

import (
    "flag"
    "fmt"
    
    customProto "github.com/sj82516/protoc-gen-go-http-client/protos"
    "google.golang.org/protobuf/compiler/protogen"
    "google.golang.org/protobuf/proto"
    "google.golang.org/protobuf/types/descriptorpb"
)

func main() {
    var flags flag.FlagSet
    baseUrl := flags.String("base_url", "", "flags from command")
    opts := &protogen.Options{
        ParamFunc: flags.Set,
    }
    opts.Run(func(gen *protogen.Plugin) error {
        for _, f := range gen.Files {
            if !f.Generate {
                continue
            }
            generateFile(gen, f, baseUrl)
        }
        return nil
    })
}

// generateFile generates a _http.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, baseURL *string) {
    filename := file.GeneratedFilenamePrefix + "_http.pb.go"
    g := gen.NewGeneratedFile(filename, file.GoImportPath)
    g.P("// Code generated by protoc-gen-go-http. DO NOT EDIT.")
    g.P("// Your base url", *baseURL)
    g.P()
    g.P("package ", file.GoPackageName)
    g.P()
    
    // use g.Import import package
    //g.P("import \"net/http\"")
    //g.P("import \"log\"")
    g.QualifiedGoIdent(protogen.GoIdent{GoName: "http", GoImportPath: "net/http"})
    g.QualifiedGoIdent(protogen.GoIdent{GoName: "log", GoImportPath: "log"})
    g.QualifiedGoIdent(protogen.GoIdent{GoName: "json", GoImportPath: "encoding/json"})
    
    for _, srv := range file.Services {
        for _, method := range srv.Methods {
            // parse option
            options := method.Desc.Options().(*descriptorpb.MethodOptions)
            if options == nil {
            }
            
            v := proto.GetExtension(options, customProto.E_MethodOpts)
            if v == nil {
            }
            
            // wrap as client
            opts, _ := v.(*customProto.HttpClientMethodOptions)
            if opts.Method == "get" {
                g.P(fmt.Sprintf("func %s() {", method.GoName))
                g.P(fmt.Sprintf("res, err := http.Get(\"https://%s%s\")\n", *baseURL, opts.Path))
                g.P(fmt.Sprintf("target := %s{}", method.Output.Desc.Name()))
                g.P("if err != nil {")
                g.P("log.Fatal(err)")
                g.P("}")
                g.P("defer res.Body.Close()")
                g.P("json.NewDecoder(res.Body).Decode(target)")
                g.P("}")
            }
        }
    }
    
    g.P()
    g.Content()
}
